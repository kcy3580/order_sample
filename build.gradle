plugins {
	id 'java'
	id 'eclipse'
	id 'jacoco'
	id 'groovy'
	id 'idea'
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

group = 'com.demo.order_sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
	// [2021-07-16] Dependency management for Spring Cloud AWS.
	springCloudVersion = '2021.0.1'
	// spring cloud version (Spring Boot 2.6.x compatibility)
	springCloudAwsVersion = '2.4.0'
	lombokVersion = '1.18.22'
	lombokMapstructBindVersion = '0.2.0'
	mapStructVersion = '1.4.2.Final'
	querydslVersion = '5.0.0'
	openApiVersion = '1.6.7'
	set('log4j2.version', '2.17.1')
	// [2021-12-29] log4j2 security issue hot fix (2.17.0 -> 2.17.1)
	snippetsDir = file('build/generated-snippets')
	// for REST Doc snippets ( test성공시 .adoc file들이 생성되는 디렉토리)
	flywayVersion = '7.15.0'
	querydslVersion = '5.0.0'

	// for security
	set('snakeyaml.version', '1.33')
}

// define the source set for integration test
sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	implementation {
		exclude group: 'org.slf4j', module: 'slf4j-simple'
		all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	complie {
		exclude group: 'org.slf4j', module: 'slf4j-simple'
	}
	// define integration test configurations based on standard test configuration
	integrationTestImplementation.extendsFrom implementation
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

	asciidoctorExtensions   // for REST Doc extension
}

repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
}

dependencyManagement {
	imports {
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2' // log4j2
	implementation 'org.springframework.cloud:spring-cloud-function-context:3.2.3'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	//########## DB ##########//
	implementation 'com.h2database:h2' //IntelliJ에서 접근 하기 위해 변경 runtimeOnly > compile
	implementation 'mysql:mysql-connector-java'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
	implementation "org.flywaydb:flyway-core:${flywayVersion}"

	//########## QueryDSL ##########//
	implementation group: 'com.querydsl', name: 'querydsl-jpa', version: querydslVersion
	implementation group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
	implementation group: 'com.querydsl', name: 'querydsl-core', version: querydslVersion
	annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
	annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion, classifier: 'jpa'
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	//########## Swagger ##########//
	implementation "org.springdoc:springdoc-openapi-ui:${openApiVersion}"

	//########## Apache ##########//
	implementation 'org.apache.commons:commons-lang3'
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
	implementation 'com.google.guava:guava:31.1-jre'

	//########## lombok ##########//
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	testImplementation("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
	implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindVersion}"

	//########## MapStruct ##########//
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

	//########## Junit5 ##########//
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	//########## MockWebServer ##########//
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.10.0'

	//########## RrestAssured for Integration Test ##########//
	integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: '4.4.0'
	integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '4.4.0'

	//########## OpenFeign ##########//
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'
	testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'

	//########## REST DOC ##########//
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'             // for REST Doc
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'      // for REST Doc (asciidoctor)

}

clean {
	delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir              // RestDoc(API문서)용 *.adoc파일 생성위치

	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
	systemProperty 'spring.profiles.active', 'gradle-test'
	useJUnitPlatform()
	reports {
		junitXml.destination(file("$buildDir/reports/test/test/junitXml"))
		junitXml.enabled(true)
		html.destination(file("$buildDir/reports/test/test/html"))
		html.enabled(true)
	}
	finalizedBy 'jacocoTestReport'
}

asciidoctor {
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	asciidoctor.doFirst {
		delete file('src/main/resources/static/docs')    // 먼저 기존에 생성되었던 API docs를 삭제한다
	}
	baseDirFollowsSourceFile()
}
build {
	task copyDocumentForApiDoc(type: Copy) {
		dependsOn asciidoctor
		from file("build/docs/asciidoc")
		into file("src/main/resources/static/docs")
	}
	dependsOn copyDocumentForApiDoc

	bootJar {
		archiveName('customer.jar')                        // jar이름
		dependsOn asciidoctor
		copy {
			from "${asciidoctor.outputDir}"
			// asciidoctor.outputDir -> build/docs/asciidoc (asciidoctor가 adoc파일들을 html로 작성한 output폴더)
			into 'BOOT-INF/classes/static/docs'             // html 파일이 jar 안의 BOOT-INF/classes/static/docs 폴더로 복사됨
		}
	}
	jar {
		enabled = false                                    // do not generate thin JAR file
	}
}
jacoco {
	toolVersion = '0.8.5'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false
		xml.destination file("$buildDir/reports/jacoco/jacoco.xml")
	}

	def Qdomains = []
	for (qPattern in "**/QA".."**/QZ") {
		Qdomains.add(qPattern + "*")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
							'**/generated-main-avro-java/*',
							'**/*Builder',
							'co/kr/**/*MapperImpl.*'
					] + Qdomains)
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in "**/QA".."**/QZ") {
		Qdomains.add(qPattern + "*")
	}

	violationRules {
		rule {

			limit {
				counter = 'LINE'
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'counter'에서 LINE은 라인 커버리지, INSTRUCTION은 실행되는 바이트 단위의 커버리지
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.70
			}
		}

		rule {
			// 룰을 간단히 켜고 끌 수 있다.
			enabled = false

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 40% 만족시켜야 한다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			// 라인 커버리지를 최소한 20% 만족시켜야 한다.
			// limit {
			//     counter = 'LINE'
			//     value = 'COVEREDRATIO'
			//     minimum = 0.20
			// }

			// 빈 줄을 제외한 코드의 라인수를 최대 700라인으로 제한한다.
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 700
				// maximum = 200
//              maximum = 8
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [
//                    '*.test.*',
//                    '*.Kotlin*'
			]
		}
	}

	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/generated-main-avro-java/*',
					'**/*Builder',
					'co/kr/**/*MapperImpl.*'
			] + Qdomains)
		})
	}
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

idea {
	module {
		testSourceDirs += sourceSets.integrationTest.java.srcDirs
		testResourceDirs += sourceSets.integrationTest.resources.srcDirs
//        scopes.TEST.plus += [ configurations.integrationTestImplementation ]
	}
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
	reports {
		junitXml.enabled(true)
		html.enabled(true)
	}
	outputs.upToDateWhen { false }
//    mustRunAfter test
}
//add the integration test task on the check list
check.dependsOn integrationTest

task installLocalGitHook(type: Copy) {
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0775
	group 'source generation'
}